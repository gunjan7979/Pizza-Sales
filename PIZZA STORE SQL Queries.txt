PIZZA STORE
Basic:
1.Retrieve the total number of orders placed.
SELECT DISTINCT count(order_id) AS  total_orders 
  FROM Pizza_Store.orders;

2.Calculate the total revenue generated from pizza sales.
SELECT round(sum(o.quantity*p.price),2) as total_rev
from order_details as o
left join pizzas as p on p.pizza_id = o.pizza_id;

3.Identify the highest-priced pizza.
SELECT t.name,p.price
  FROM pizzas AS p
LEFT JOIN pizza_type2 AS t ON t.pizza_type_id = p.pizza_type_id
ORDER BY price DESC 
  LIMIT 1;

4.Identify the most common pizza size ordered.
SELECT p.size , SUM(o.quantity) as orderss
  FROM order_details AS o
LEFT JOIN pizzas AS p ON p.pizza_id = o.pizza_id
  GROUP BY 1
ORDER BY orderss DESC
  LIMIT 1;

5.List the top 5 most ordered pizza types along with their quantities.
SELECT t.name,p.pizza_type_id , SUM(o.quantity) AS orderss
  FROM order_details AS o
LEFT JOIN pizzas AS p ON p.pizza_id = o.pizza_id
  LEFT JOIN pizza_type2 AS t ON t.pizza_type_id = p.pizza_type_id
GROUP BY 1,2
ORDER BY orderss DESC 
  LIMIT 5;


Intermediate:
1.Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT t.category , SUM(o.quantity) AS orderss
FROM order_details AS o
LEFT JOIN pizzas AS p ON p.pizza_id = o.pizza_id
  LEFT JOIN pizza_type2 AS t ON t.pizza_type_id = p.pizza_type_id
GROUP BY 1;

2.Determine the distribution of orders by hour of the day.
SELECT DISTINCT HOUR(time) as hour, COUNT(order_id) AS orderss
FROM orders
GROUP BY 1
ORDER BY orderss DESC;

3.Join relevant tables to find the category-wise distribution of pizzas.
SELECT category , COUNT(category) AS count
  FROM pizza_type2
GROUP BY 1;

4.Group the orders by date and calculate the average number of pizzas ordered per day.
  WITH 
  cal AS (SELECT DISTINCT o.date, SUM(quantity) AS orderss
FROM orders AS o
  LEFT JOIN order_details AS d ON d.order_id = o.order_id
GROUP BY 1)
    
SELECT round(avg(orderss)) AS avg_order
FROM cal;

5.Determine the top 3 most ordered pizza types based on revenue.
SELECT t.name,p.pizza_type_id,
       round(SUM(o.quantity*p.price),2) AS total_rev
  FROM order_details AS o
LEFT JOIN pizzas AS p ON p.pizza_id = o.pizza_id
LEFT JOIN pizza_type2 AS t ON t.pizza_type_id = p.pizza_type_id
  GROUP BY 1,2
  ORDER BY total_rev DESC
  LIMIT 3;

Advance:
1.Calculate the percentage contribution of each pizza type to total revenue.
SELECT t.name,
  round((SUM(o.quantity*p.price)/
       (SELECT  round(SUM(o.quantity*p.price),2) AS total_rev
          FROM order_details AS o
          LEFT JOIN pizzas AS p ON p.pizza_id = o.pizza_id)
       )*100,2) AS perc
FROM order_details AS o
LEFT JOIN pizzas AS p ON p.pizza_id = o.pizza_id
LEFT JOIN pizza_type2 AS t ON t.pizza_type_id = p.pizza_type_id
GROUP BY 1;

2.Analyze the cumulative revenue generated over time.
WITH 
  cal AS
  (SELECT o.date, SUM(d.quantity*p.price) AS rev
    FROM orders AS o
    LEFT JOIN order_details AS d ON d.order_id = o.order_id
    LEFT JOIN pizzas AS p on p.pizza_id = d.pizza_id
    GROUP BY 1)
SELECT date, 
  SUM(rev) OVER(order by date) as cum_rev
FROM cal;

3.Determine the top 3 most ordered pizza types based on revenue for each pizza category.
SELECT category,name, rev, ranks
FROM
(WITH 
  cal AS (SELECT t.category, t.name, SUM(o.quantity*p.price) AS rev
         FROM order_details AS o
         LEFT JOIN pizzas AS p ON p.pizza_id = o.pizza_id
         LEFT JOIN pizza_type2 AS t ON t.pizza_type_id = p.pizza_type_id
         GROUP BY 1,2 )

  SELECT category,name,rev,
  rank() over(PARTITION BY category ORDER BY rev DESC) AS ranks
  FROM cal
) AS d
WHERE ranks <= 3

